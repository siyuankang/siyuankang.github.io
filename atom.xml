<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不求甚解</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.siykang.xyz/"/>
  <updated>2021-02-09T09:53:23.683Z</updated>
  <id>www.siykang.xyz/</id>
  
  <author>
    <name>Simiro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解作用域(阅读【你不知道的JavaScript】书)</title>
    <link href="www.siykang.xyz/2021/02/09/%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>www.siykang.xyz/2021/02/09/理解作用域/</id>
    <published>2021-02-09T06:36:51.000Z</published>
    <updated>2021-02-09T09:53:23.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写在前面，这里的内容是我阅读书籍，根据书中的详细讲解，提出自己理解的地方，总结在这里，仅此目的而已，欢迎一起学习共勉。Thanks for [你不知道的JavaScript]</p><h3 id="三个重要概念"><a href="#三个重要概念" class="headerlink" title="三个重要概念"></a>三个重要概念</h3><p>引擎，编译器，作用域</p><p>引擎：从头到尾负责整个 JavaScript 程序的编译及执行过程。</p><p>编译器：引擎的好朋友之一，负责语法分析及代码生成等脏活累活。</p><p>作用域：引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查 询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p><p>当你看见 var a = 2; 这段程序时，很可能认为这是一句声明。但我们的新朋友引擎却不这 么看。事实上，引擎认为这里有两个完全不同的声明，一个由编译器在编译时处理，另一 个则由引擎在运行时处理。<br><img src="/2021/02/09/理解作用域/base1.png" alt="书籍中的截图"></p><p>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如 果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对 它赋值。</p><h3 id="RHS查询和LHS查询"><a href="#RHS查询和LHS查询" class="headerlink" title="RHS查询和LHS查询"></a>RHS查询和LHS查询</h3><p>console.log( a ); 其中对 a 的引用是一个 RHS 引用，因为这里 a 并没有赋予任何值。相应地，需要查找并取 得 a 的值，这样才能将值传递给 console.log(..)。<br>相比之下，例如： a = 2; 这里对 a 的引用则是 LHS 引用，因为实际上我们并不关心当前的值是什么，只是想要为 = 2 这个赋值操作找到一个目标。</p><p>***书中的总结———— LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁（LHS）”以及“谁是赋值操作的源头 （RHS）”。</p><p><img src="/2021/02/09/理解作用域/base2.jpg" alt="书籍中的测试题"></p><h3 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h3><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(a) &#123; </span><br><span class="line">  console.log( a + b ); </span><br><span class="line">&#125;</span><br><span class="line">var b = 2;</span><br><span class="line">foo( 2 ); // 4</span><br></pre></td></tr></table></figure></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>为什么区分 LHS 和 RHS 是一件重要的事情？ 因为在变量还没有声明（在任何作用域中都无法找到该变量）的情况下，这两种查询的行 为是不一样的。 考虑如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(a) &#123; </span><br><span class="line">  console.log( a + b ); b = a; </span><br><span class="line">&#125;</span><br><span class="line">foo( 2 );</span><br></pre></td></tr></table></figure></p><p>第一次对 b 进行 RHS 查询时是无法找到该变量的。也就是说，这是一个“未声明”的变 量，因为在任何相关的作用域中都无法找到它。<br>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。值得注意的是，ReferenceError 是非常重要的异常类型。 相较之下，当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量， 全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非 “严格模式”下。 “不，这个变量之前并不存在，但是我很热心地帮你创建了一个。<br>” ES5 中引入了“严格模式”。同正常模式，或者说宽松 / 懒惰模式相比，严格模式在行为上 有很多不同。其中一个不同的行为是严格模式禁止自动或隐式地创建全局变量。因此，在 严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。 接下来，如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError。 ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对 结果的操作是非法或不合理的。</p><font color="orange">摘自《你不知道的JavaScript》</font><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>书中给的定义：<br>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p>下面这段代码，清晰的展示了  闭包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>() &#123;</span><br><span class="line">  var a = 2;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">bar</span></span>() &#123;</span><br><span class="line">    console.log( a ); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line">var baz = foo(); </span><br><span class="line">baz(); // 2 —— 朋友，这就是闭包的效果（使用闭包）</span><br></pre></td></tr></table></figure></p><p>变量a本身是在函数foo中被声明并赋值的，通常情况下，我们不可能在 全局取到a的值<br>但是运用上面的代码处理，我们居然能打印出2。foo函数中返回了一个新的函数bar(),<br>bar内部是可以获取a的值的，因为它处于foo函数体内，我们在全局作用域调用foo函数，<br>foo函数又返回了bar函数，我们继续调用bar函数，bar函数就会打印a的值，因为bar函数能获取到a的值，我们就巧妙的得出了结果2。确实闭包就是利用函数作用域摆脱全局作用域产生的影响</p><h4 id="引用书中对于这段代码的说明"><a href="#引用书中对于这段代码的说明" class="headerlink" title="引用书中对于这段代码的说明"></a>引用书中对于这段代码的说明</h4><p>在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。 而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域？原来是 bar() 本身在使用。 拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一 直存活，以供 bar() 在之后任何时间进行引用。 bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ECMscript新特新</title>
    <link href="www.siykang.xyz/2021/02/09/ECMscript%E6%96%B0%E7%89%B9%E6%96%B0/"/>
    <id>www.siykang.xyz/2021/02/09/ECMscript新特新/</id>
    <published>2021-02-09T02:34:52.000Z</published>
    <updated>2021-02-12T12:39:20.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关于ECMscript和JavaScript的关系"><a href="#关于ECMscript和JavaScript的关系" class="headerlink" title="关于ECMscript和JavaScript的关系"></a>关于ECMscript和JavaScript的关系</h3><p>ECMscript也是一门脚本语言，简称ES，通常看作是JavaScript的标准化规范，但实际上JavaScript是ES的扩展语言，ES只提供了基本的语法<br>1.在浏览器环境中JavaScript=ES+webApi    (WEBAPI=DOM+BOM)<br><img src="/2021/02/09/ECMscript新特新/ES1.png" alt="浏览器环境"><br>2.在Node环境中JavaScript=ES+NodeApi    (nodeAPI=fs+net+etc.)<br><img src="/2021/02/09/ECMscript新特新/ES2.png" alt="Node环境"></p><h3 id="安装nodemon"><a href="#安装nodemon" class="headerlink" title="安装nodemon"></a>安装nodemon</h3><p>在向下学习之前我们安装一下nodemon，这样会方便一些<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemon -g</span><br></pre></td></tr></table></figure></p><p>执行下nodemon -v<br>出现版本号证明安装成功</p><p>执行nodemon 你的文件名.js<br>就启动了nodemon，可以自动监听到文件修改，执行该脚本<br><img src="/2021/02/09/ECMscript新特新/ES3.png" alt="效果图"></p><h3 id="ES主要新特性-let与块级作用域"><a href="#ES主要新特性-let与块级作用域" class="headerlink" title="ES主要新特性-let与块级作用域"></a>ES主要新特性-let与块级作用域</h3><p>1.let的出现为JavaScript提供了块级作用域<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    var a = 0</span><br><span class="line">    <span class="built_in">let</span> b = 1</span><br><span class="line">&#125;</span><br><span class="line">console.log(a) //0</span><br><span class="line">console.log(b) //ReferenceError: b is not defined</span><br></pre></td></tr></table></figure></p><p>2.let申明的变量不可提升<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(b) //undefined</span><br><span class="line">console.log(a) //ReferenceError: Cannot access <span class="string">'a'</span> before initialization</span><br><span class="line">var b = 11</span><br><span class="line"><span class="built_in">let</span> a = 12</span><br></pre></td></tr></table></figure></p><h3 id="const-只读特性"><a href="#const-只读特性" class="headerlink" title="const 只读特性"></a>const 只读特性</h3><p>const和let的区别就是比let多了个只读特性，一旦被声明，将不允许被指向新的内存地址，但是可以修改它的属性成员<br>const obj={}<br>obj.name=”Jack” √<br>obj=”joy”  ×<br>总结最佳实践：不用var，主用const，配合let</p><h3 id="proxy和defineProerty的对比"><a href="#proxy和defineProerty的对比" class="headerlink" title="proxy和defineProerty的对比"></a>proxy和defineProerty的对比</h3><p>defineProerty只能监听对象的读取和写入,而proxy可以监听的更多<br><img src="/2021/02/09/ECMscript新特新/ES4.png" alt="proxy可以监听的属性@lagou"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>尝试从0写出promise</title>
    <link href="www.siykang.xyz/2021/02/07/%E5%B0%9D%E8%AF%95%E4%BB%8E0%E5%86%99%E5%87%BApromise/"/>
    <id>www.siykang.xyz/2021/02/07/尝试从0写出promise/</id>
    <published>2021-02-07T15:50:15.000Z</published>
    <updated>2021-02-08T09:23:21.872Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="①-promise的雏形搭建"><a href="#①-promise的雏形搭建" class="headerlink" title="① promise的雏形搭建"></a>① promise的雏形搭建</h3><p>基础promise<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习、</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="②-改进改进promise"><a href="#②-改进改进promise" class="headerlink" title="② 改进改进promise"></a>② 改进改进promise</h3><p>基于上个版本实现的promise，我们可以进行改进<br>promise的状态只能改变一次，所以我们需要在成功和失败的回调函数中，<br>提前判断状态，只有在pending状态下，才能修改状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="③-完善promise"><a href="#③-完善promise" class="headerlink" title="③ 完善promise"></a>③ 完善promise</h3><p>上个版本我们完成了promise的前奏，但是那只是个上半身，<br>没有腿怎么跑的起来呢？所以我们在这里给它完善一下，这个时候.then要上场了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调</span><br><span class="line">    successCallBack = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调</span><br><span class="line">    failCallBack = undefined</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">            successCallBack(this.value)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">            failCallBack(this.reason)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    //reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.then((value, reason) =&gt; &#123;</span><br><span class="line">    console.log(value) //成功</span><br><span class="line">    console.log(reason) //undfined</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//☺我们在promise中返回了成功，.<span class="keyword">then</span>中打印结果可以看出successCallBack给我们返回了</span><br><span class="line">//成功，而reject值仍为初始定义的undfined</span><br></pre></td></tr></table></figure></p><h3 id="④-异步调用情况及多次调用promise"><a href="#④-异步调用情况及多次调用promise" class="headerlink" title="④ 异步调用情况及多次调用promise"></a>④ 异步调用情况及多次调用promise</h3><p>咳咳嗯….上一个版本中，我们总算让了promise跑了起来，即使它看起来不是那么cool，<br>至少它看起来有点那个范儿了，但成长总需要个过程和时间，不是吗？ok，接下来我们就来<br>让它更强大些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = &apos;pending&apos;</span><br><span class="line">const FULFILLED = &apos;fulfilled&apos;</span><br><span class="line">const REJECT = &apos;reject&apos;</span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        if (this.status !== PENDING) return</span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用while判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住shift，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        while (this.successCallBack.length) this.successCallBack.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        if (this.status !== PENDING) return</span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用while判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住shift，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        while (this.failCallBack.length) this.failCallBack.shift()(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * then方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    then(successCallBack, failCallBack) &#123;</span><br><span class="line">        if (this.status === FULFILLED) &#123;</span><br><span class="line">            successCallBack(this.value)</span><br><span class="line">        &#125; else if (this.status === REJECT) &#123;</span><br><span class="line">            failCallBack(this.reason)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //①此处就是改进的地方了，我们要补充pending状态下的逻辑</span><br><span class="line">            //这里promise的状态还是pending，所以还不能回调，我们把successCallBack</span><br><span class="line">            //和failCallBack初始值定义为数组，将传进来的2个函数参数，push进去</span><br><span class="line">            //微任务执行完毕后，代码开始执行宏任务，resolve得到了执行</span><br><span class="line">            this.successCallBack.push(successCallBack)</span><br><span class="line">            this.failCallBack.push(failCallBack)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line">let promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        // resolve(&apos;成功&apos;);</span><br><span class="line">        reject(&apos;失败&apos;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    console.log(reason)</span><br><span class="line">&#125;, reason =&gt; console.log(reason))</span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    console.log(reason)</span><br><span class="line">&#125;, reason =&gt; console.log(reason))</span><br><span class="line"></span><br><span class="line">//请看下我们为什么需要更强大些，在我们调用promise时，如果我们使用了setTimeout这样的</span><br><span class="line">//异步函数执行resolve,是这runcode一下，嗯哼.....这就是我们需要改进的地方了</span><br><span class="line">//我们分析上面的代码，实例化了promise，定义了一个setTimeout函数，它是个宏任务，</span><br><span class="line">//所以代码就向下走，调用了.then()方法，但你看，settimeout中的resolve没有得到执行，</span><br><span class="line">//就没有改变promise的状态，then()方法中没有关于pending状态下的逻辑，所以什么也打印</span><br><span class="line">//不出来，我们想一下，我们是不是少了一个判断呢，去代码中改进吧</span><br></pre></td></tr></table></figure></p><h3 id="⑤-实现promise的链式调用"><a href="#⑤-实现promise的链式调用" class="headerlink" title="⑤ 实现promise的链式调用"></a>⑤ 实现promise的链式调用</h3><p>是不是越来越像样了呢，别高兴的太早，又有了新的问题出现，咱们用正宗的promise时，<br>人家都能.then().then()….这么链条似的调用，您这儿行吗？Emmmmm语塞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">            successCallBack(this.value)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">            failCallBack(this.reason)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            //①此处就是改进的地方了，我们要补充pending状态下的逻辑</span><br><span class="line">            //这里promise的状态还是pending，所以还不能回调，我们把successCallBack</span><br><span class="line">            //和failCallBack初始值定义为数组，将传进来的2个函数参数，push进去</span><br><span class="line">            //微任务执行完毕后，代码开始执行宏任务，resolve得到了执行</span><br><span class="line">            this.successCallBack.push(successCallBack)</span><br><span class="line">            this.failCallBack.push(failCallBack)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    //reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    <span class="built_in">return</span> 100</span><br><span class="line">&#125;).<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//什么玩意儿，一顿报错，就这儿？还是虚心学习，再次改进吧，嘤嘤嘤</span><br><span class="line">//既然是想链式调用，我们看下链式调用的写法,第二个.<span class="keyword">then</span>()拿到的value值，其实</span><br><span class="line">//是第一个.<span class="keyword">then</span>()返回下去的100，这是正规的promise对象已经实现的</span><br><span class="line">//这里我们分为2步，1.怎么实现.<span class="keyword">then</span>()的链式调用</span><br><span class="line">//怎么把第一个<span class="keyword">then</span>的值传承下去，让第二个<span class="keyword">then</span>能拿到，第三个，第四个......</span><br></pre></td></tr></table></figure></p><h3 id="⑥-promise-then-返回promise的情况"><a href="#⑥-promise-then-返回promise的情况" class="headerlink" title="⑥ promise.then()返回promise的情况"></a>⑥ promise.then()返回promise的情况</h3><p>  我们上一版本已经实现了山寨的链式调用，并且then方法能返回值给下一个then方法，<br>  为什么还是说它山寨呢？因为我们这里的代码<br>  let x = successCallBack(this.value)<br>  resolve(x)，我们这里resolve直接返回了，但是如果x是一个promsie对象呢？就需要判断<br>  它的状态，不是pending 才能给下一个then()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> *            </span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                //获取x的值</span><br><span class="line">                <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line">                    //判断x的值是普通还是promise对象</span><br><span class="line">                    //如果是普通值，直接调用resolve</span><br><span class="line">                    //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                    //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                    //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                    //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                resolvePromise(x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line">                reject(x)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //①此处就是改进的地方了，我们要补充pending状态下的逻辑</span><br><span class="line">                //这里promise的状态还是pending，所以还不能回调，我们把successCallBack</span><br><span class="line">                //和failCallBack初始值定义为数组，将传进来的2个函数参数，push进去</span><br><span class="line">                //微任务执行完毕后，代码开始执行宏任务，resolve得到了执行</span><br><span class="line">                this.successCallBack.push(successCallBack)</span><br><span class="line">                this.failCallBack.push(failCallBack)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(x, resolve, reject) &#123;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    //reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">other</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        resolve(<span class="string">'I am promise'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">        <span class="built_in">return</span> other()</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">        console.log(value) //这里打印出I am promise</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里我们定义一个other函数，返回promise</span><br></pre></td></tr></table></figure><h3 id="⑦-promise-then-返回自身的异常处理"><a href="#⑦-promise-then-返回自身的异常处理" class="headerlink" title="⑦ promise.then()返回自身的异常处理"></a>⑦ promise.then()返回自身的异常处理</h3><p>我们上一版本已经实现了链式调用可以返回promise的场景了，看起来是不是更完美了<br>可麻烦又来了，有一个极端的情况是我们没有考虑的，比如我们在前一个.then方法中<br>返回了自己….去下面的调用中看看吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    //获取x的值</span><br><span class="line">                    <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                    //判断x的值是普通还是promise对象</span><br><span class="line">                    //如果是普通值，直接调用resolve</span><br><span class="line">                    //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                    //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                    //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                    //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                    //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                    //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                    //没错可以使用settimeout</span><br><span class="line">                    resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line">                reject(x)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //①此处就是改进的地方了，我们要补充pending状态下的逻辑</span><br><span class="line">                //这里promise的状态还是pending，所以还不能回调，我们把successCallBack</span><br><span class="line">                //和failCallBack初始值定义为数组，将传进来的2个函数参数，push进去</span><br><span class="line">                //微任务执行完毕后，代码开始执行宏任务，resolve得到了执行</span><br><span class="line">                this.successCallBack.push(successCallBack)</span><br><span class="line">                this.failCallBack.push(failCallBack)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    //reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> aa = promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line"></span><br><span class="line">    //这里我们返回了一个自己，在正常的promise中，这里是不被允许的</span><br><span class="line">    //所以我们需要给程序报出错误</span><br><span class="line">    <span class="built_in">return</span> aa</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">aa.then(value =&gt; &#123;</span><br><span class="line">        console.log(value) //这里打印出I am promise</span><br><span class="line">    &#125;, reason =&gt; console.log(reason.message)) //打印出了Chaining cycle detected <span class="keyword">for</span> promise <span class="comment">#&lt;promise&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里我们定义一个other函数，返回promise</span><br></pre></td></tr></table></figure></p><h3 id="⑧-promise异常捕获"><a href="#⑧-promise异常捕获" class="headerlink" title="⑧ promise异常捕获"></a>⑧ promise异常捕获</h3><p>我们再回头看一下，应付过去了很多，但是貌似忽略了异常处理，这样的代码是不够健壮的<br>所以我们需要在适当的地方，捕获下异常情况 constructor中和then()方法中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习      </span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //这里我们需要改变一下，才能处理异常,把pending状态下</span><br><span class="line">                //像上面的代码一样，settimeout，trycatch，把resolvePromise的结果</span><br><span class="line">                //push进去this.successCallBack和failCallBack,等待执行</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(<span class="string">'成功'</span>);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">    // throw new Error(<span class="string">'executor error'</span>)</span><br><span class="line">    // resolve(<span class="string">'成功'</span>);</span><br><span class="line">    //reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">        <span class="built_in">return</span> 6666</span><br><span class="line">            // throw new Error(<span class="string">'then error'</span>)</span><br><span class="line">    &#125;, reason =&gt; console.log(reason.message))</span><br><span class="line">    .<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">    &#125;, reason =&gt; console.log(reason.message)) //<span class="keyword">then</span> error</span><br></pre></td></tr></table></figure></p><h3 id="⑨-让promise-then-可以不传递参数，并让后面的then-拿到返回的值"><a href="#⑨-让promise-then-可以不传递参数，并让后面的then-拿到返回的值" class="headerlink" title="⑨ 让promise.then()可以不传递参数，并让后面的then()拿到返回的值"></a>⑨ 让promise.then()可以不传递参数，并让后面的then()拿到返回的值</h3><p>接下来我们接着模仿Promise，promise.then().then().then()…<br>看到了吗，then方法其实可以不传递任何参数，我们试着处理这种情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习     </span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //我们只需要在这里处理下<span class="keyword">then</span>没有传递参数的情况,把value和reason直接传给下一个<span class="keyword">then</span></span><br><span class="line">        successCallBack = successCallBack ? successCallBack : value =&gt; value</span><br><span class="line">        failCallBack = failCallBack ? failCallBack : reason =&gt; &#123; throw reason &#125;</span><br><span class="line">            //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //这里我们需要改变一下，才能处理异常,把pending状态下</span><br><span class="line">                //像上面的代码一样，settimeout，trycatch，把resolvePromise的结果</span><br><span class="line">                //push进去this.successCallBack和failCallBack,等待执行</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // &#125;, 2000);</span><br><span class="line">    // // throw new Error(<span class="string">'executor error'</span>)</span><br><span class="line">    // // resolve(<span class="string">'成功'</span>);</span><br><span class="line">    reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then().<span class="keyword">then</span>()</span><br><span class="line">    .<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">    &#125;, reason =&gt; console.log(reason)) //拿到reason</span><br></pre></td></tr></table></figure></p><h3 id="⑩-promise的all方法的实现"><a href="#⑩-promise的all方法的实现" class="headerlink" title="⑩ promise的all方法的实现"></a>⑩ promise的all方法的实现</h3><p>promise.all()<br>接下来我们实现promise的all<br>promise.all属于静态方法,调用示例：p1,p2为promise的函数返回’p1’,’p2’<br>Promise.all([‘a’,’b’,p1(),p2(),’c’]).then(result=&gt;console.log(result))<br>结果打印出[‘a’,’b’,’p1’,’p2’,’c’]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //我们只需要在这里处理下<span class="keyword">then</span>没有传递参数的情况,把value和reason直接传给下一个<span class="keyword">then</span></span><br><span class="line">        successCallBack = successCallBack ? successCallBack : value =&gt; value</span><br><span class="line">        failCallBack = failCallBack ? failCallBack : reason =&gt; &#123; throw reason &#125;</span><br><span class="line">            //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //这里我们需要改变一下，才能处理异常,把pending状态下</span><br><span class="line">                //像上面的代码一样，settimeout，trycatch，把resolvePromise的结果</span><br><span class="line">                //push进去this.successCallBack和failCallBack,等待执行</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static all(array) &#123;</span><br><span class="line">        <span class="built_in">let</span> result = []</span><br><span class="line">        <span class="built_in">let</span> index = 0</span><br><span class="line">        <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">function</span> addData(key, value) &#123;</span><br><span class="line">                result[key] = value</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">                const current = array[i]</span><br><span class="line"></span><br><span class="line">                //判断current是promise还是普通值</span><br><span class="line">                <span class="keyword">if</span> (current instanceof MyPromise) &#123;</span><br><span class="line">                    //promise对象</span><br><span class="line">                    current.then(value =&gt; addData(i, value), reason =&gt; reject(reason))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    //普通值</span><br><span class="line">                    addData(i, current)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // &#125;, 2000);</span><br><span class="line">    // // throw new Error(<span class="string">'executor error'</span>)</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(<span class="string">'p1'</span>)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        resolve(<span class="string">'p2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">MyPromise.all([<span class="string">'a'</span>, <span class="string">'b'</span>, p1(), p2(), <span class="string">'c'</span>]).<span class="keyword">then</span>(result =&gt; console.log(result))</span><br></pre></td></tr></table></figure></p><h3 id="⑪-promise的resolve方法的实现"><a href="#⑪-promise的resolve方法的实现" class="headerlink" title="⑪ promise的resolve方法的实现"></a>⑪ promise的resolve方法的实现</h3><p>resolve方法会将传入的参数转化成promise返回，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> * promise.all()</span><br><span class="line"> * 接下来我们实现promise的all</span><br><span class="line"> * promise.all属于静态方法,调用示例：p1,p2为promise的函数返回<span class="string">'p1'</span>,<span class="string">'p2'</span></span><br><span class="line"> * Promise.all([<span class="string">'a'</span>,<span class="string">'b'</span>,p1(),p2(),<span class="string">'c'</span>]).<span class="keyword">then</span>(result=&gt;console.log(result))</span><br><span class="line"> * 结果打印出[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'p1'</span>,<span class="string">'p2'</span>,<span class="string">'c'</span>]</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //我们只需要在这里处理下<span class="keyword">then</span>没有传递参数的情况,把value和reason直接传给下一个<span class="keyword">then</span></span><br><span class="line">        successCallBack = successCallBack ? successCallBack : value =&gt; value</span><br><span class="line">        failCallBack = failCallBack ? failCallBack : reason =&gt; &#123; throw reason &#125;</span><br><span class="line">            //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //这里我们需要改变一下，才能处理异常,把pending状态下</span><br><span class="line">                //像上面的代码一样，settimeout，trycatch，把resolvePromise的结果</span><br><span class="line">                //push进去this.successCallBack和failCallBack,等待执行</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">finally</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="function"><span class="title">catch</span></span> () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    static resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value instanceof MyPromise) <span class="built_in">return</span> value</span><br><span class="line">        <span class="built_in">return</span> new MyPromise(resolve =&gt; &#123;</span><br><span class="line">            resolve(value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    static all(array) &#123;</span><br><span class="line">        <span class="built_in">let</span> result = []</span><br><span class="line">        <span class="built_in">let</span> index = 0</span><br><span class="line">        <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">function</span> addData(key, value) &#123;</span><br><span class="line">                result[key] = value</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">                const current = array[i]</span><br><span class="line"></span><br><span class="line">                //判断current是promise还是普通值</span><br><span class="line">                <span class="keyword">if</span> (current instanceof MyPromise) &#123;</span><br><span class="line">                    //promise对象</span><br><span class="line">                    current.then(value =&gt; addData(i, value), reason =&gt; reject(reason))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    //普通值</span><br><span class="line">                    addData(i, current)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // &#125;, 2000);</span><br><span class="line">    // // throw new Error(<span class="string">'executor error'</span>)</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(<span class="string">'p1'</span>)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        resolve(<span class="string">'p2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">MyPromise.all([<span class="string">'a'</span>, <span class="string">'b'</span>, p1(), p2(), <span class="string">'c'</span>]).<span class="keyword">then</span>(result =&gt; console.log(result))</span><br><span class="line">MyPromise.resolve(10).<span class="keyword">then</span>(value =&gt; console.log(value))</span><br><span class="line">MyPromise.resolve(p2()).<span class="keyword">then</span>(value =&gt; console.log(value))</span><br></pre></td></tr></table></figure></p><h3 id="⑫-promise的finally和catch方法"><a href="#⑫-promise的finally和catch方法" class="headerlink" title="⑫ promise的finally和catch方法"></a>⑫ promise的finally和catch方法</h3><p>finally方法特点，无论这个promise的状态成功或是失败，它都会被执行一次,并且可以返回一个promise对象<br>catch用力捕获上一个then方法返回的失败回调<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title 手写promise练习</span><br><span class="line"> * promise.all()</span><br><span class="line"> * 接下来我们实现promise的all</span><br><span class="line"> * promise.all属于静态方法,调用示例：p1,p2为promise的函数返回<span class="string">'p1'</span>,<span class="string">'p2'</span></span><br><span class="line"> * Promise.all([<span class="string">'a'</span>,<span class="string">'b'</span>,p1(),p2(),<span class="string">'c'</span>]).<span class="keyword">then</span>(result=&gt;console.log(result))</span><br><span class="line"> * 结果打印出[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'p1'</span>,<span class="string">'p2'</span>,<span class="string">'c'</span>]</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 定义初始promise的三个状态</span><br><span class="line"> * @status pending fulfilled reject</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    //执行器函数</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义初始状态为pending</span><br><span class="line">    status = PENDING</span><br><span class="line"></span><br><span class="line">    //定义默认成功回调的返回值</span><br><span class="line">    value = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认失败回调的返回值</span><br><span class="line">    reason = undefined</span><br><span class="line"></span><br><span class="line">    //定义默认成功状态接收的回调，定义为数组</span><br><span class="line">    successCallBack = []</span><br><span class="line"></span><br><span class="line">    //定义默认失败状态接收的回调，定义为数组</span><br><span class="line">    failCallBack = []</span><br><span class="line"></span><br><span class="line">    //成功的回调resolve</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //成功回调中将状态改为fulfilled，返回值改为传递过来的参数</span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前successCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧value传回去</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的回调reject</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        //这里要判断状态是在pending下，才能修改状态</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        //失败回调中将状态改为reject，返回值改为传递过来的参数</span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line"></span><br><span class="line">        //②：回调逻辑我们放在这里执行，使用<span class="keyword">while</span>判断当前failCallBack数组</span><br><span class="line">        //有没有push进去回调函数，有的话我们就去调用里面的函数，记住<span class="built_in">shift</span>，调用一次</span><br><span class="line">        //就删掉，最后别忘了吧reason传回去</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">then</span>方法是promie原型链上的方法，让promise可以优雅的回调</span><br><span class="line">     * 我们需要在上方定义一个默认的successCallBack和failCallBack</span><br><span class="line">     * @param &#123;*&#125; successCallBack 成功状态的回调函数</span><br><span class="line">     * @param &#123;*&#125; failCallBack 失败状态的回调函数</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        //我们只需要在这里处理下<span class="keyword">then</span>没有传递参数的情况,把value和reason直接传给下一个<span class="keyword">then</span></span><br><span class="line">        successCallBack = successCallBack ? successCallBack : value =&gt; value</span><br><span class="line">        failCallBack = failCallBack ? failCallBack : reason =&gt; &#123; throw reason &#125;</span><br><span class="line">            //要想实现<span class="keyword">then</span>方法的链式调用，就要让<span class="keyword">then</span>方法返回promise</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //获取x的值</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                        //判断x的值是普通还是promise对象</span><br><span class="line">                        //如果是普通值，直接调用resolve</span><br><span class="line">                        //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                        //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                        //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                        //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                        //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                        //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                        //没错可以使用settimeout</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //这里我们需要改变一下，才能处理异常,把pending状态下</span><br><span class="line">                //像上面的代码一样，settimeout，trycatch，把resolvePromise的结果</span><br><span class="line">                //push进去this.successCallBack和failCallBack,等待执行</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //获取x的值</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line"></span><br><span class="line">                            //判断x的值是普通还是promise对象</span><br><span class="line">                            //如果是普通值，直接调用resolve</span><br><span class="line">                            //如果是promise对象 查看promise对象返回的结果</span><br><span class="line">                            //再根据promise对象返回的结果 决定调用resolve还是reject</span><br><span class="line">                            //把值传递给下一个<span class="keyword">then</span>，</span><br><span class="line">                            //三种状态都要去处理这个promise所以，我们在这里调用一个函数resolvePromise</span><br><span class="line"></span><br><span class="line">                            //这里注意promiseContinue我们这样取不到，因为该promise还没执行完</span><br><span class="line">                            //得想个办法保证promiseContinue执行完了，才调用resolvePromise，</span><br><span class="line">                            //没错可以使用settimeout</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收一个回调函数</span><br><span class="line">     * @param &#123;*&#125; callBack </span><br><span class="line">     */</span><br><span class="line">    finally(callBack) &#123;</span><br><span class="line">        //先用<span class="keyword">then</span>方法取得promise的状态</span><br><span class="line">        <span class="built_in">return</span> this.then(value =&gt; &#123;</span><br><span class="line">            //这里可以利用resolve方法处理,将callback转化为promise</span><br><span class="line">            //再调用<span class="keyword">then</span>(),将结果返回给下一个<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> MyPromise.resolve(callBack()).<span class="keyword">then</span>(() =&gt; value)</span><br><span class="line">        &#125;, reason =&gt; &#123;</span><br><span class="line">            <span class="built_in">return</span> MyPromise.resolve(callBack()).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">                throw reason</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; catch (failCallBack) &#123;</span><br><span class="line">        // catch方法接收一个失败回调，也执行<span class="keyword">then</span>(),注册了一个失败回调</span><br><span class="line">        <span class="built_in">return</span> this.then(undefined, failCallBack)</span><br><span class="line">    &#125;</span><br><span class="line">    static resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value instanceof MyPromise) <span class="built_in">return</span> value</span><br><span class="line">        <span class="built_in">return</span> new MyPromise(resolve =&gt; &#123;</span><br><span class="line">            resolve(value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    static all(array) &#123;</span><br><span class="line">        <span class="built_in">let</span> result = []</span><br><span class="line">        <span class="built_in">let</span> index = 0</span><br><span class="line">        <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">function</span> addData(key, value) &#123;</span><br><span class="line">                result[key] = value</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">                const current = array[i]</span><br><span class="line"></span><br><span class="line">                //判断current是promise还是普通值</span><br><span class="line">                <span class="keyword">if</span> (current instanceof MyPromise) &#123;</span><br><span class="line">                    //promise对象</span><br><span class="line">                    current.then(value =&gt; addData(i, value), reason =&gt; reject(reason))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    //普通值</span><br><span class="line">                    addData(i, current)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @name: 获取promise的状态</span><br><span class="line"> * @param &#123;*&#125; x 返回的值</span><br><span class="line"> * @param &#123;*&#125; resolve</span><br><span class="line"> * @param &#123;*&#125; reject</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    //判断返回的是不是本身，如果是本身就返回错误，阻止程序进行</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    //判断x是不是MyPromise的实例</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        //是promise对象</span><br><span class="line">        // x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//下面我们可以感受一下咱们自家制造的promise</span><br><span class="line"><span class="built_in">let</span> promise = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // &#125;, 2000);</span><br><span class="line">    // // throw new Error(<span class="string">'executor error'</span>)</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">    // reject(<span class="string">'失败'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(<span class="string">'p1'</span>)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">p2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">        // resolve(<span class="string">'p2'</span>)</span><br><span class="line">        reject(<span class="string">'p2 reject'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// MyPromise.all([<span class="string">'a'</span>, <span class="string">'b'</span>, p1(), p2(), <span class="string">'c'</span>]).<span class="keyword">then</span>(result =&gt; console.log(result))</span><br><span class="line">// MyPromise.resolve(10).<span class="keyword">then</span>(value =&gt; console.log(value))</span><br><span class="line">// MyPromise.resolve(p2()).<span class="keyword">then</span>(value =&gt; console.log(value))</span><br><span class="line">p2().finally(() =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'finally'</span>)</span><br><span class="line">    <span class="built_in">return</span> p1()</span><br><span class="line">&#125;).<span class="keyword">then</span>(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;).catch(reason =&gt; console.log(`第285行：<span class="variable">$&#123;reason&#125;</span>`))</span><br></pre></td></tr></table></figure></p><h3 id="⑬-理解完整代码并自己手写出来"><a href="#⑬-理解完整代码并自己手写出来" class="headerlink" title="⑬ 理解完整代码并自己手写出来"></a>⑬ 理解完整代码并自己手写出来</h3><p>我们去掉所有注释，试着去读一下完整代码，理解之后，再手写一遍，加深印象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @title MyPromise完整实现</span><br><span class="line"> */</span><br><span class="line">const PENDING = <span class="string">'pending'</span></span><br><span class="line">const FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line">const REJECT = <span class="string">'reject'</span></span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            this.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    status = PENDING</span><br><span class="line">    value = undefined</span><br><span class="line">    reason = undefined</span><br><span class="line">    successCallBack = []</span><br><span class="line">    failCallBack = []</span><br><span class="line">    resolve = value =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line">        this.status = FULFILLED</span><br><span class="line">        this.value = value</span><br><span class="line">        <span class="keyword">while</span> (this.successCallBack.length) this.successCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line">    reject = reason =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.status !== PENDING) <span class="built_in">return</span></span><br><span class="line">        this.status = REJECT</span><br><span class="line">        this.reason = reason</span><br><span class="line">        <span class="keyword">while</span> (this.failCallBack.length) this.failCallBack.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">then</span>(successCallBack, failCallBack) &#123;</span><br><span class="line">        successCallBack = successCallBack ? successCallBack : value =&gt; value</span><br><span class="line">        failCallBack = failCallBack ? failCallBack : reason =&gt; &#123; throw reason &#125;</span><br><span class="line">        <span class="built_in">let</span> promiseContinue = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.status === FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.status === REJECT) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line">                        resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                this.successCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            <span class="built_in">let</span> x = successCallBack(this.value)</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">                this.failCallBack.push(() =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            <span class="built_in">let</span> x = failCallBack(this.reason)</span><br><span class="line">                            resolvePromise(promiseContinue, x, resolve, reject)</span><br><span class="line">                        &#125; catch (error) &#123;</span><br><span class="line">                            reject(error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">return</span> promiseContinue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finally(callBack) &#123;</span><br><span class="line">        <span class="built_in">return</span> this.then(value =&gt; &#123;</span><br><span class="line">            <span class="built_in">return</span> MyPromise.resolve(callBack()).<span class="keyword">then</span>(() =&gt; value)</span><br><span class="line">        &#125;, reason =&gt; &#123;</span><br><span class="line">            <span class="built_in">return</span> MyPromise.resolve(callBack()).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">                throw reason</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; catch (failCallBack) &#123;</span><br><span class="line">        <span class="built_in">return</span> this.then(undefined, failCallBack)</span><br><span class="line">    &#125;</span><br><span class="line">    static resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value instanceof MyPromise) <span class="built_in">return</span> value</span><br><span class="line">        <span class="built_in">return</span> new MyPromise(resolve =&gt; &#123;</span><br><span class="line">            resolve(value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    static all(array) &#123;</span><br><span class="line">        <span class="built_in">let</span> result = []</span><br><span class="line">        <span class="built_in">let</span> index = 0</span><br><span class="line">        <span class="built_in">return</span> new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">function</span> addData(key, value) &#123;</span><br><span class="line">                result[key] = value</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">                    resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">                const current = array[i]</span><br><span class="line">                <span class="keyword">if</span> (current instanceof MyPromise) &#123;</span><br><span class="line">                    current.then(value =&gt; addData(i, value), reason =&gt; reject(reason))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    addData(i, current)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="built_in">return</span> reject(new TypeError(<span class="string">'Chaining cycle detected for promise #&lt;promise&gt;'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x instanceof MyPromise) &#123;</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>再学前端@lagou</title>
    <link href="www.siykang.xyz/2021/02/07/%E5%86%8D%E5%AD%A6%E5%89%8D%E7%AB%AF@lagou/"/>
    <id>www.siykang.xyz/2021/02/07/再学前端@lagou/</id>
    <published>2021-02-06T17:55:51.000Z</published>
    <updated>2021-02-09T02:34:03.080Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="事件循环eventloop"><a href="#事件循环eventloop" class="headerlink" title="事件循环eventloop"></a>事件循环eventloop</h3><p><img src="/2021/02/07/再学前端@lagou/eventloop.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo和markdown</title>
    <link href="www.siykang.xyz/2019/07/18/hello-world/"/>
    <id>www.siykang.xyz/2019/07/18/hello-world/</id>
    <published>2019-07-18T06:22:15.788Z</published>
    <updated>2021-02-06T18:09:46.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="插入图片的方法-先检查下你的node-modules-hexo-asset-image的index-js文件"><a href="#插入图片的方法-先检查下你的node-modules-hexo-asset-image的index-js文件" class="headerlink" title="插入图片的方法[先检查下你的node_modules/hexo-asset-image的index.js文件]"></a>插入图片的方法[先检查下你的node_modules/hexo-asset-image的index.js文件]</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var beginPos = getPosition(link, <span class="string">'/'</span>, 3) + 1;改成后面的这句》》</span><br><span class="line">var beginPos = getPosition(link, <span class="string">'/'</span>, 1) + 1;</span><br></pre></td></tr></table></figure><p>然后写Markdown<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这就是个图](hello-world/createApp.png)</span><br></pre></td></tr></table></figure></p><p><font color="#c0c0c0">下面是我自己搭的简单的棚  ↓↓↓↓</font><br><img src="/2019/07/18/hello-world/createApp.png" alt="&lt;font color=#0099FF&gt;这就是个图&lt;/font&gt;"></p><h3 id="放上别人的链接"><a href="#放上别人的链接" class="headerlink" title="放上别人的链接"></a>放上别人的链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Server](https://hexo.io/docs/server.html)</span><br></pre></td></tr></table></figure><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a><font color="#c0c0c0">举个栗子</font></h4><p><a href="https://www.imoecg.com/" target="_blank" rel="noopener">一颗大萝北</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="搭建hexo遇到的问题" scheme="www.siykang.xyz/categories/%E6%90%AD%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="认识hexo和markdown。" scheme="www.siykang.xyz/tags/%E8%AE%A4%E8%AF%86hexo%E5%92%8Cmarkdown%E3%80%82/"/>
    
  </entry>
  
  <entry>
    <title>Apicloud技巧总结</title>
    <link href="www.siykang.xyz/2019/05/08/Apicloud%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/"/>
    <id>www.siykang.xyz/2019/05/08/Apicloud常用函数封装/</id>
    <published>2019-05-08T07:33:19.000Z</published>
    <updated>2020-02-28T12:11:15.341Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="苹果测试证书申请链接"><a href="#苹果测试证书申请链接" class="headerlink" title="苹果测试证书申请链接"></a>苹果测试证书申请链接</h3><p><a href="https://www.cnblogs.com/appuploader/p/11597818.html" target="_blank" rel="noopener">苹果测试证书申请</a></p><h3 id="头部标题，底部按钮适配iphoneX系列"><a href="#头部标题，底部按钮适配iphoneX系列" class="headerlink" title="头部标题，底部按钮适配iphoneX系列"></a>头部标题，底部按钮适配iphoneX系列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.aui-bar-nav &#123;</span><br><span class="line">    /*padding: 0 11px 0 13px;</span><br><span class="line">    box-sizing: border-box;*/</span><br><span class="line">    top: 0;</span><br><span class="line">    line-height: 2.25rem;</span><br><span class="line">    background-color: <span class="comment">#fff;</span></span><br><span class="line">    color: <span class="comment">#ffffff;</span></span><br><span class="line">    border: none;</span><br><span class="line">    background-size: 100% 1px;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: bottom;</span><br><span class="line">    background-image: linear-gradient(0, <span class="comment">#EEEEEE, #EEEEEE 50%, transparent 50%);</span></span><br><span class="line">    background-image: -webkit-linear-gradient(90deg, <span class="comment">#EEEEEE, #EEEEEE 50%, transparent 50%);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aui-bar-nav .aui-btn .aui-iconfont &#123;</span><br><span class="line">    font-size: 0.9rem;</span><br><span class="line">    line-height: 1.25rem;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    color: <span class="comment">#000000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aui-bar-nav .aui-title &#123;</span><br><span class="line">    min-height: 2.25rem;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    right: 5rem;</span><br><span class="line">    left: 5rem;</span><br><span class="line">    width: auto;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    z-index: 2;</span><br><span class="line">    color: <span class="comment">#333333;</span></span><br><span class="line">    font-size: 17px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aui-btn span &#123;</span><br><span class="line">    width: 22px;</span><br><span class="line">    height: 22px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aui-btn span img &#123;</span><br><span class="line">    width: 22px;</span><br><span class="line">    height: 22px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aui-bar-nav .aui-pull-right &#123;</span><br><span class="line">    padding: 0 11px;</span><br><span class="line">    font-size: 0.8rem;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    z-index: 2;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    display: flex;</span><br><span class="line">    -webkit-align-items: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">.aui-btn &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 0.7rem;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    font-family: inherit;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0;</span><br><span class="line">    background: <span class="comment">#EEEEEE;</span></span><br><span class="line">    padding: 0 15px!important;</span><br><span class="line">    height: 1.5rem;</span><br><span class="line">    line-height: 1.5rem;</span><br><span class="line">    border-radius: 0.2rem;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.aui-pull-right&#123;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    color: <span class="comment">#222222!important;</span></span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">    footer &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        padding: 5px 15px 4px 15px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        position: fixed;</span><br><span class="line">        bottom: 0!important;</span><br><span class="line">        left: 0;</span><br><span class="line">        background: <span class="comment">#fff;</span></span><br><span class="line">        border: none;</span><br><span class="line">        background-size: 100% 1px;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: top;</span><br><span class="line">        background-image: linear-gradient(0, <span class="comment">#EEEEEE, #EEEEEE 50%, transparent 50%);</span></span><br><span class="line">        background-image: -webkit-linear-gradient(90deg, <span class="comment">#EEEEEE, #EEEEEE 50%, transparent 50%);</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    cl.apiready();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="apicloud常用模块功能的封装"><a href="#apicloud常用模块功能的封装" class="headerlink" title="apicloud常用模块功能的封装"></a>apicloud常用模块功能的封装</h3><p>封装模块功能是第一生产力   应用项目—-建筑机械</p><ol><li>上传图片并显示缩略图</li><li>上推选择框模块selector封装。</li><li>ajax请求也要封装好，各种参数状态返回判断。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript基础回炉再造</title>
    <link href="www.siykang.xyz/2019/03/27/Javascript/"/>
    <id>www.siykang.xyz/2019/03/27/Javascript/</id>
    <published>2019-03-27T12:26:52.000Z</published>
    <updated>2021-02-06T17:09:52.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="神奇的javascript"><a href="#神奇的javascript" class="headerlink" title="神奇的javascript"></a>神奇的javascript</h3><h3 id="VUE修改v-for数据后，页面数据不更新"><a href="#VUE修改v-for数据后，页面数据不更新" class="headerlink" title="VUE修改v-for数据后，页面数据不更新"></a>VUE修改v-for数据后，页面数据不更新</h3><p>改完数组对象之后，执行以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$forceUpdate</span>();</span><br></pre></td></tr></table></figure></p><h3 id="看看这些被同事喷的JS代码风格你写过多少"><a href="#看看这些被同事喷的JS代码风格你写过多少" class="headerlink" title="看看这些被同事喷的JS代码风格你写过多少"></a>看看这些被同事喷的JS代码风格你写过多少</h3><p><a href="https://mp.weixin.qq.com/s/zTTrX39iqUD2y9PIpqTP9A" target="_blank" rel="noopener">代码举例，摘自网络</a></p><h3 id="高级前端js进阶-学习链接-gt"><a href="#高级前端js进阶-学习链接-gt" class="headerlink" title="高级前端js进阶 学习链接-&gt;"></a>高级前端js进阶 <a href="https://blog.csdn.net/qq_37802511/article/details/83625693" target="_blank" rel="noopener">学习链接-&gt;</a></h3><h3 id="前端时间格式的转换-2019-09-09T16-00-00-000Z"><a href="#前端时间格式的转换-2019-09-09T16-00-00-000Z" class="headerlink" title="前端时间格式的转换 2019-09-09T16:00:00.000Z"></a>前端时间格式的转换 2019-09-09T16:00:00.000Z</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//转换时间格式，难免后端会传递些奇怪的东西，所以遇到了就记录下吧。`_`</span><br><span class="line">formateDate(datetime) &#123;</span><br><span class="line">    <span class="keyword">function</span> addDateZero(num) &#123;</span><br><span class="line">        <span class="built_in">return</span> (num &lt; 10 ? <span class="string">"0"</span> + num : num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> d = new Date(datetime);</span><br><span class="line">    <span class="built_in">let</span> formatdatetime = d.getFullYear() + <span class="string">'-'</span> + addDateZero(d.getMonth() + 1) + <span class="string">'-'</span> + addDateZero(d.getDate()) + <span class="string">' '</span> + addDateZero(d.getHours()) + <span class="string">':'</span> + addDateZero(d.getMinutes()) + <span class="string">':'</span> + addDateZero(d.getSeconds());</span><br><span class="line">    <span class="built_in">return</span> formatdatetime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise简单使用"><a href="#Promise简单使用" class="headerlink" title="Promise简单使用"></a>Promise简单使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //做一些异步操作</span><br><span class="line">    var userNowLocation = <span class="variable">$api</span>.getStorage(<span class="string">'userNowLocation'</span>);</span><br><span class="line">    var GoogleMap = api.require(<span class="string">'googleMap'</span>);</span><br><span class="line">    (<span class="keyword">function</span>(i)&#123;</span><br><span class="line">        GoogleMap.getDistance(&#123;</span><br><span class="line">            start: &#123;</span><br><span class="line">                lon: userNowLocation.lon,</span><br><span class="line">                lat: userNowLocation.lat</span><br><span class="line">            &#125;,</span><br><span class="line">            end: &#123;</span><br><span class="line">                lon: adminOpenedCity[i].longitude,</span><br><span class="line">                lat: adminOpenedCity[i].latitude</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">function</span>(ret) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret.status) &#123;</span><br><span class="line">                adminOpenedCity[i].distance = ret.distance;</span><br><span class="line">                resolve(adminOpenedCity[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">'当前GPS信号弱!'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then((data) =&gt; &#123;</span><br><span class="line">    console.log(JSON.stringify(data));</span><br><span class="line">&#125;)</span><br><span class="line">// .<span class="keyword">then</span>((data) =&gt; &#123;</span><br><span class="line">//     console.log(JSON.stringify(data));</span><br><span class="line">// &#125;)</span><br><span class="line">// .<span class="keyword">then</span>((data) =&gt; &#123;</span><br><span class="line">//     console.log(JSON.stringify(data));</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure><h3 id="pc端禁止input数字框滚动，消除上下箭头，只能输入-gt-0的整数和小数。"><a href="#pc端禁止input数字框滚动，消除上下箭头，只能输入-gt-0的整数和小数。" class="headerlink" title="pc端禁止input数字框滚动，消除上下箭头，只能输入&gt;=0的整数和小数。"></a>pc端禁止input数字框滚动，消除上下箭头，只能输入&gt;=0的整数和小数。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    input::-webkit-outer-spin-button,input::-webkit-inner-spin-button&#123;</span><br><span class="line">        -webkit-appearance:textfield;</span><br><span class="line">    &#125;</span><br><span class="line">    input[<span class="built_in">type</span>=<span class="string">"number"</span>]&#123;</span><br><span class="line">        -moz-appearance:textfield;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> onkeyup=<span class="string">"this.value=this.value.replace(/[^\d.]/g, '').replace(/\.&#123;2,&#125;/g, '.').replace('.', '<span class="variable">$#</span>*').replace(/\./g,'').replace(/^[0]+[0-9]/,'').replace('<span class="variable">$#</span>*','.').replace(/^(\d+)\.(\d\d).*$/, '<span class="variable">$1</span>.<span class="variable">$2</span>')"</span> onafterpaste=<span class="string">"this.value=this.value.replace(/[^\d.]/g, '').replace(/\.&#123;2,&#125;/g, '.').replace('.', '<span class="variable">$#</span>*').replace(/\./g,'').replace(/^[0]+[0-9]/,'').replace('<span class="variable">$#</span>*','.').replace(/^(\d+)\.(\d\d).*$/, '<span class="variable">$1</span>.<span class="variable">$2</span>')"</span> lay-verify=<span class="string">"required"</span> onmousewheel=<span class="string">"scrollFunc()"</span>  onDOMMouseScroll=<span class="string">"scrollFunc()"</span> name=<span class="string">"entertainment_fee"</span> placeholder=<span class="string">"请输入金额"</span> autocomplete=<span class="string">"off"</span> class=<span class="string">"layui-input"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> scrollFunc(evt) &#123;</span><br><span class="line">        evt = evt || window.event;</span><br><span class="line">        <span class="keyword">if</span>(evt.preventDefault) &#123;</span><br><span class="line">            // Firefox</span><br><span class="line">            evt.preventDefault();</span><br><span class="line">            evt.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            // IE</span><br><span class="line">            evt.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">            evt.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    layui.use([<span class="string">'form'</span>, <span class="string">'code'</span>], <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        form = layui.form;</span><br><span class="line"></span><br><span class="line">        layui.code();</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'#address'</span>).xcity(<span class="string">'安徽'</span>,<span class="string">'合肥市'</span>,<span class="string">'蜀山区'</span>);</span><br><span class="line">        // $(<span class="string">'select[name="area"]'</span>)[0].length = $(<span class="string">'select[name="area"]'</span>)[0].length -2;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="从后端返回的富文本中把图片取出来"><a href="#从后端返回的富文本中把图片取出来" class="headerlink" title="从后端返回的富文本中把图片取出来"></a>从后端返回的富文本中把图片取出来</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\&lt;img[^\&gt;]*[\/]?\&gt;/ig;</span><br><span class="line">ret.content = ret.centent.replace(/&lt;[^&gt;]+&gt;/g, <span class="string">""</span>);//取出富文本中得文字内容</span><br><span class="line"><span class="keyword">if</span>(ret.length) &#123;</span><br><span class="line">    <span class="keyword">for</span>(var i=0;i&lt;ret.length;i++) &#123;</span><br><span class="line">        var result = ret[i].centent.match(reg);</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            ret[i].imgUrl = [];</span><br><span class="line">            <span class="keyword">for</span> (j = 0; j &lt; result.length; j++)&#123;</span><br><span class="line">                result[j].replace( /src=(\<span class="string">"|\')?([^\"\&gt;]*)(\"|\')?( |&gt;|\/)/ig, function( <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$4</span> )&#123;</span></span><br><span class="line"><span class="string">                    result[j] = <span class="variable">$3</span>;</span></span><br><span class="line"><span class="string">                &#125;);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            ret[i].imgUrl = result;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    vm.news_list = ret;</span></span><br><span class="line"><span class="string">    vm.offset += 10;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="递归解决for循环中处理数组的问题"><a href="#递归解决for循环中处理数组的问题" class="headerlink" title="递归解决for循环中处理数组的问题"></a>递归解决for循环中处理数组的问题</h3><p><font color="#c0c0c0">问题描述：</font><br>今天写项目的时候，遇到一个问题，简单来说吧，我需要把一个数组中的每个元素都转化一下，<br>得到一个新的数组，转化是通过一个异步的方法来实现的（必须通过这种方法），于是第一个就<br>想到了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line"><span class="keyword">for</span>(var i=0; i&lt;data.length;i++)&#123;</span><br><span class="line">UIAlbumBrowser.transPath(&#123;</span><br><span class="line">        path: data[i].path</span><br><span class="line">    &#125;, <span class="keyword">function</span>(ret, err) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            arr.push(ret.path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> arr;</span><br></pre></td></tr></table></figure></p><p>但是上面这段代码得到的arr你会发现是[]，我理解可能这个UIAlbumBrowser…的方法是个异步的函数<br>所以根本得不到新的arr。我请教了同事，同事给我支了一招，确确实实解决了这个问题，在这里我是要感谢下他的。<br>我们使用了递归。简单说就是自己调自己。如果我这次没能知道这个办法，那么下次我绝对不会熟练地<br>敲出来。这就是我奉行的原则。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vm.curs(i);</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">curs: <span class="keyword">function</span>(i,list)&#123;</span><br><span class="line">            var UIAlbumBrowser = api.require(<span class="string">'UIAlbumBrowser'</span>);</span><br><span class="line">            UIAlbumBrowser.transPath(&#123;</span><br><span class="line">                path: list[i].path</span><br><span class="line">            &#125;, <span class="keyword">function</span>(ret, err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">                    vm.imgArr.push(ret.path);</span><br><span class="line">                    <span class="keyword">if</span>(i == vm.imgLength - 1) &#123;</span><br><span class="line">                        vm.submitImg(vm.imgArr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    vm.curs(i+1,list);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>这样就得到了一个新的arr了，有个地方不明白，为什么 vm.curs(i+1,list);后面的代码只执行一次呢？</p><h3 id="闭包处理异步"><a href="#闭包处理异步" class="headerlink" title="闭包处理异步"></a>闭包处理异步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var p = [];</span><br><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5.length; i++) &#123;</span><br><span class="line"> p[i] = (<span class="keyword">function</span>(num)&#123;</span><br><span class="line"><span class="built_in">return</span> num;</span><br><span class="line"> &#125;)(i);     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纯数组变成json字符串"><a href="#纯数组变成json字符串" class="headerlink" title="纯数组变成json字符串"></a>纯数组变成json字符串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var dynamicImg = [];</span><br><span class="line"><span class="keyword">for</span>(var a = 0; a&lt;imgList.length; a++)&#123;</span><br><span class="line">        var info = &#123;&#125;;</span><br><span class="line">        info.src =  imgList[a];</span><br><span class="line">        dynamicImg.push(info);</span><br><span class="line">    &#125;</span><br><span class="line">console.log(dynamicImg);</span><br></pre></td></tr></table></figure><h3 id="ajax传递数组参数的注意事项-这个问题耽误了我很多的时间，也得不出答案，真的是很烦很烦。"><a href="#ajax传递数组参数的注意事项-这个问题耽误了我很多的时间，也得不出答案，真的是很烦很烦。" class="headerlink" title="ajax传递数组参数的注意事项,这个问题耽误了我很多的时间，也得不出答案，真的是很烦很烦。"></a>ajax传递数组参数的注意事项,这个问题耽误了我很多的时间，也得不出答案，真的是很烦很烦。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">traditional：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/feinifi/article/details/81180673" target="_blank" rel="noopener">我从这个地方学习到的-&gt;</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JS" scheme="www.siykang.xyz/categories/JS/"/>
    
    
      <category term="Javascript" scheme="www.siykang.xyz/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5学习轨迹</title>
    <link href="www.siykang.xyz/2019/03/20/thinkphp5%E5%AD%A6%E4%B9%A0%E8%BD%A8%E8%BF%B9/"/>
    <id>www.siykang.xyz/2019/03/20/thinkphp5学习轨迹/</id>
    <published>2019-03-20T12:10:38.000Z</published>
    <updated>2019-05-07T06:57:22.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用phpstudy，报错问题"><a href="#使用phpstudy，报错问题" class="headerlink" title="使用phpstudy，报错问题"></a>使用phpstudy，报错问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Internet.......500</span><br></pre></td></tr></table></figure><p>这种问题，除了网上所说的常见问题外，还有可能就是因为，你配置了虚拟域名，vhost-ini文件没有生产配置文件导致的，<br>你用PHPstudy直接打开配置文件，照着之前的配置改一下就ok了。</p><h3 id="tp5页面跳转"><a href="#tp5页面跳转" class="headerlink" title="tp5页面跳转"></a>tp5页面跳转</h3><p>tp5页面跳转是非常方便的，但是如果页面用到了需要记录状态的操作，浏览器一跳转就会刷新没了，比如你的tabs选项卡，<br>暂时我也没有找到更好的办法，就记录下我当时的解决方案吧，直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.onload=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">   var getIndexNum = sessionStorage.getItem(<span class="string">'active'</span>);</span><br><span class="line">   $(<span class="string">'#'</span>+ getIndexNum).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">   // sessionStorage.setItem(<span class="string">'active'</span>,null);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> active(i,id) &#123;</span><br><span class="line">       sessionStorage.setItem(<span class="string">'active'</span>,id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>方法也很简单的，就是给tabs绑定点击事件，点击同时把id给浏览器，记住这个id，<br>每次页面刷新后就获取下这个id，有就去匹配tab的id，设置选中的样式。只是提供个思路，仅仅是个解决问题的思路。</p><h3 id="PHP制作微信宫格头像"><a href="#PHP制作微信宫格头像" class="headerlink" title="PHP制作微信宫格头像"></a>PHP制作微信宫格头像</h3><p>这是我从网上copy的，但是当图片是3个一下时，就会报错，原因不详，也许和画布有关系吧，不太懂，我试着摸索的改了几个坐标值<br>，可以实现效果，（注释的是网上co下来的，我改了几个坐标可以勉强实现功能）直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> mergerPicture()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$pic_list</span>  = array(</span><br><span class="line">            <span class="string">'http://img2.woyaogexing.com/2017/12/22/899b4898540220ed!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/1f1ac11c3dbfa9c3!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/bfe8d1746b3dd070!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/859b2340387abaaf!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/12/6d49a5ff1cb61326!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/12/849d33113c5bfc05!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/11/28/753e0dd79217399d!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/10/25/898b1cb67f21d7af!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/f6484acf3414ecc4!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/ff943af22751a3da!400x400_big.jpg'</span>,</span><br><span class="line">//            <span class="string">'http://img2.woyaogexing.com/2017/12/22/899b4898540220ed!400x400_big.jpg'</span>,</span><br><span class="line">        );</span><br><span class="line">        shuffle(<span class="variable">$pic_list</span>);</span><br><span class="line">        <span class="variable">$pic_list</span> = array_slice(<span class="variable">$pic_list</span>, 0, 9); // 只操作前9个图片</span><br><span class="line">        <span class="variable">$bg_w</span> = 150; // 背景图片宽度</span><br><span class="line">        <span class="variable">$bg_h</span> = 150; // 背景图片高度</span><br><span class="line">        <span class="variable">$background</span> = imagecreatetruecolor(<span class="variable">$bg_w</span>,<span class="variable">$bg_h</span>); // 背景图片</span><br><span class="line">        <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$background</span>, 255, 255, 255); // 为真彩色画布创建白色背景，再设置为透明</span><br><span class="line">        imagefill(<span class="variable">$background</span>, 0, 0, <span class="variable">$color</span>);</span><br><span class="line">        imageColorTransparent(<span class="variable">$background</span>, <span class="variable">$color</span>);</span><br><span class="line">        <span class="variable">$pic_count</span> = count(<span class="variable">$pic_list</span>);</span><br><span class="line">        <span class="variable">$lineArr</span> = array(); // 需要换行的位置</span><br><span class="line">        <span class="variable">$space_x</span> = 3;</span><br><span class="line">        <span class="variable">$space_y</span> = 3;</span><br><span class="line">        <span class="variable">$line_x</span> = 0;</span><br><span class="line">        switch(<span class="variable">$pic_count</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> 1: // 正中间</span><br><span class="line">//                <span class="variable">$start_x</span> = intval(<span class="variable">$bg_w</span>/4); // 开始位置X</span><br><span class="line">//                <span class="variable">$start_y</span> = intval(<span class="variable">$bg_h</span>/4); // 开始位置Y</span><br><span class="line">//                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/2); // 宽度</span><br><span class="line">//                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/2); // 高度</span><br><span class="line">//                <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$start_x</span> = 4; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 4; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = <span class="variable">$bg_w</span> - 8; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = <span class="variable">$bg_h</span> - 8; // 高度</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 2: // 中间位置并排</span><br><span class="line">//                <span class="variable">$start_x</span> = 2;</span><br><span class="line">//                <span class="variable">$start_y</span> = intval(<span class="variable">$bg_h</span>/4) + 3;</span><br><span class="line">//                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/2) - 5;</span><br><span class="line">//                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/2) - 5;</span><br><span class="line">//                <span class="variable">$space_x</span> = 5;</span><br><span class="line">//                <span class="built_in">break</span>;</span><br><span class="line">                <span class="variable">$start_x</span> = 76; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/2) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/2) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(2);</span><br><span class="line">                <span class="variable">$line_x</span> = 4;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 3:</span><br><span class="line">                <span class="variable">$start_x</span> = 40; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/2) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/2) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(2);</span><br><span class="line">                <span class="variable">$line_x</span> = 4;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 4:</span><br><span class="line">                <span class="variable">$start_x</span> = 4; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/2) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/2) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(3);</span><br><span class="line">                <span class="variable">$line_x</span> = 4;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 5:</span><br><span class="line">                <span class="variable">$start_x</span> = 30; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 30; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/3) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/3) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(3);</span><br><span class="line">                <span class="variable">$line_x</span> = 5;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 6:</span><br><span class="line">                <span class="variable">$start_x</span> = 5; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 30; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/3) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/3) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(4);</span><br><span class="line">                <span class="variable">$line_x</span> = 5;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 7:</span><br><span class="line">                <span class="variable">$start_x</span> = 53; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/3) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/3) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(2,5);</span><br><span class="line">                <span class="variable">$line_x</span> = 5;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 8:</span><br><span class="line">                <span class="variable">$start_x</span> = 30; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/3) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/3) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(3,6);</span><br><span class="line">                <span class="variable">$line_x</span> = 5;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 9:</span><br><span class="line">                <span class="variable">$start_x</span> = 5; // 开始位置X</span><br><span class="line">                <span class="variable">$start_y</span> = 5; // 开始位置Y</span><br><span class="line">                <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span>/3) - 5; // 宽度</span><br><span class="line">                <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span>/3) - 5; // 高度</span><br><span class="line">                <span class="variable">$lineArr</span> = array(4,7);</span><br><span class="line">                <span class="variable">$line_x</span> = 5;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        foreach( <span class="variable">$pic_list</span> as <span class="variable">$k</span>=&gt;<span class="variable">$pic_path</span> ) &#123;</span><br><span class="line">            <span class="variable">$kk</span> = <span class="variable">$k</span> + 1;</span><br><span class="line">            <span class="keyword">if</span> ( in_array(<span class="variable">$kk</span>, <span class="variable">$lineArr</span>) ) &#123;</span><br><span class="line">                <span class="variable">$start_x</span> = <span class="variable">$line_x</span>;</span><br><span class="line">                <span class="variable">$start_y</span> = <span class="variable">$start_y</span> + <span class="variable">$pic_h</span> + <span class="variable">$space_y</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$pathInfo</span> = pathinfo(<span class="variable">$pic_path</span>);</span><br><span class="line">            switch( strtolower(<span class="variable">$pathInfo</span>[<span class="string">'extension'</span>]) ) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'jpg'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'jpeg'</span>:</span><br><span class="line">                    <span class="variable">$imagecreatefromjpeg</span> = <span class="string">'imagecreatefromjpeg'</span>;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'png'</span>:</span><br><span class="line">                    <span class="variable">$imagecreatefromjpeg</span> = <span class="string">'imagecreatefrompng'</span>;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'gif'</span>:</span><br><span class="line">                default:</span><br><span class="line">                    <span class="variable">$imagecreatefromjpeg</span> = <span class="string">'imagecreatefromstring'</span>;</span><br><span class="line">                    <span class="variable">$pic_path</span> = file_get_contents(<span class="variable">$pic_path</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$resource</span> = <span class="variable">$imagecreatefromjpeg</span>(<span class="variable">$pic_path</span>);</span><br><span class="line">            // <span class="variable">$start_x</span>,<span class="variable">$start_y</span> copy图片在背景中的位置</span><br><span class="line">            // 0,0 被copy图片的位置</span><br><span class="line">            // <span class="variable">$pic_w</span>,<span class="variable">$pic_h</span> copy后的高度和宽度</span><br><span class="line">            imagecopyresized(<span class="variable">$background</span>,<span class="variable">$resource</span>,<span class="variable">$start_x</span>,<span class="variable">$start_y</span>,0,0,<span class="variable">$pic_w</span>,<span class="variable">$pic_h</span>,imagesx(<span class="variable">$resource</span>),imagesy(<span class="variable">$resource</span>)); </span><br><span class="line">            // 最后两个参数为原始图片宽度和高度，倒数两个参数为copy时的图片宽度和高度</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="variable">$start_x</span> + <span class="variable">$pic_w</span> + <span class="variable">$space_x</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        header(<span class="string">"Content-type: image/jpeg"</span>);</span><br><span class="line">//        dump(<span class="variable">$background</span>);</span><br><span class="line">        imagejpeg(<span class="variable">$background</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><font color="#c0c0c0">备注：imagejpeg这个函数还有其他几个同类比如imagepng，第一个参数是要合成的图片，<br>    第二个参数可以填文件名，文件地址，记不清了直接去PHP文档找吧→_→</font>   <a href="http://www.php.net/manual/en/function.imagejpeg.php" target="_blank" rel="noopener">imagejpeg</a></p><h3 id="tp5-常用命令行"><a href="#tp5-常用命令行" class="headerlink" title="tp5+常用命令行"></a>tp5+常用命令行</h3><p>1.创建模块</p><p><font color="#c0c0c0">首先把根目录下的build.php文件copy到你的applicatio    n目录下，<br>然后在application下的build.php中定义好要你需要生成的控制器、模型、视图，举个栗子↓↓↓</font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义demo模块的自动生成 （按照实际定义的文件名生成）</span><br><span class="line">    <span class="string">'upload'</span>     =&gt; [</span><br><span class="line">        <span class="string">'__file__'</span>   =&gt; [<span class="string">'common.php'</span>],</span><br><span class="line">        <span class="string">'__dir__'</span>    =&gt; [<span class="string">'controller'</span>, <span class="string">'model'</span>, <span class="string">'view'</span>],</span><br><span class="line">        <span class="string">'controller'</span> =&gt; [<span class="string">'Index'</span>, <span class="string">'Upload'</span>],</span><br><span class="line">        <span class="string">'model'</span>      =&gt; [<span class="string">'ShowFile'</span>, <span class="string">'UploadFile'</span>],</span><br><span class="line">        <span class="string">'view'</span>       =&gt; [<span class="string">'index/index'</span>],</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><p>下一步就去控制台执行php think build</p><p>2.创建控制器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(你想创建一个资源控制器)&#123;</span><br><span class="line">    php think make:controller <span class="built_in">test</span>/Blog</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(创建一个空的控制器) &#123;</span><br><span class="line">    php think make:controller <span class="built_in">test</span>/Blog --plain</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自学记录" scheme="www.siykang.xyz/categories/%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="PHP" scheme="www.siykang.xyz/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>开发apicloud遇到的问题和开发技巧</title>
    <link href="www.siykang.xyz/2019/03/20/css%E6%80%BB%E7%BB%93/"/>
    <id>www.siykang.xyz/2019/03/20/css总结/</id>
    <published>2019-03-20T04:29:58.000Z</published>
    <updated>2021-02-06T16:15:57.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前端需要学习的HTTP知识"><a href="#前端需要学习的HTTP知识" class="headerlink" title="前端需要学习的HTTP知识"></a>前端需要学习的HTTP知识</h3><p><a href="https://www.jianshu.com/p/0800f6bb52c8" target="_blank" rel="noopener">很详细哦 ，感谢-&gt; https://www.cnblogs.com/chaoran/p/4783633.html</a></p><h3 id="点击水波纹效果css实现"><a href="#点击水波纹效果css实现" class="headerlink" title="点击水波纹效果css实现"></a>点击水波纹效果css实现</h3><p><a href="https://demo.demohuo.top/jquery/32/3205/demo/" target="_blank" rel="noopener">阅读请至-&gt; https://demo.demohuo.top/jquery/32/3205/demo/</a></p><h3 id="点击水波纹效果JS实现"><a href="#点击水波纹效果JS实现" class="headerlink" title="点击水波纹效果JS实现"></a>点击水波纹效果JS实现</h3><p><a href="https://github.com/siyuankang/resource/tree/master" target="_blank" rel="noopener">阅读请至-&gt; https://github.com/siyuankang/resource/tree/master</a></p><h3 id="vue设置五星好评显示o-￣▽￣"><a href="#vue设置五星好评显示o-￣▽￣" class="headerlink" title="vue设置五星好评显示o(￣▽￣)"></a>vue设置五星好评显示o(￣▽￣)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data：&#123;</span><br><span class="line">star_active:0</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=<span class="string">"flex-star"</span>&gt;</span><br><span class="line">    &lt;span v-for=<span class="string">"n in 5"</span> class=<span class="string">"star-static"</span> :class=<span class="string">"&#123;'star-active':star_active&gt;=n&#125;"</span>&gt;333&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="得到时间差值，精确到秒"><a href="#得到时间差值，精确到秒" class="headerlink" title="得到时间差值，精确到秒"></a>得到时间差值，精确到秒</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var timestamp = Date.parse( new Date());</span><br><span class="line">var race_time = Date.parse(data.race_time);</span><br><span class="line">var diff = race_time - timestamp;</span><br><span class="line">   //计算出相差天数</span><br><span class="line">   var days = Math.floor(diff/(24*3600*1000));</span><br><span class="line">   //计算出小时数</span><br><span class="line">   var leave1=diff%(24*3600*1000);    //计算天数后剩余的毫秒数</span><br><span class="line">   var hours=Math.floor(leave1/(3600*1000));</span><br><span class="line">   //计算相差分钟数</span><br><span class="line">   var leave2=leave1%(3600*1000);        //计算小时数后剩余的毫秒数</span><br><span class="line">   var minutes=Math.floor(leave2/(60*1000));</span><br><span class="line">   //计算相差秒数</span><br><span class="line">   var leave3=leave2%(60*1000);      //计算分钟数后剩余的毫秒数</span><br><span class="line">   var seconds=Math.round(leave3/1000);</span><br><span class="line">   var returnStr = seconds + <span class="string">"秒"</span>;</span><br><span class="line">   <span class="keyword">if</span>(minutes&gt;0) &#123;</span><br><span class="line">       returnStr = minutes + <span class="string">"分"</span> + returnStr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(hours&gt;0) &#123;</span><br><span class="line">       returnStr = hours + <span class="string">"小时"</span> + returnStr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(days&gt;0) &#123;</span><br><span class="line">       returnStr = days + <span class="string">"天"</span> + returnStr;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="时间倒计时效果-非原创"><a href="#时间倒计时效果-非原创" class="headerlink" title="时间倒计时效果(非原创)"></a>时间倒计时效果(非原创)</h3><p><a href="https://www.jb51.net/article/126383.htm" target="_blank" rel="noopener">从这里看到的</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var timer = null;</span><br><span class="line">var diff = <span class="string">'时间戳'</span>;</span><br><span class="line">timer=setInterval(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var day=0,</span><br><span class="line">    hour=0,</span><br><span class="line">    minute=0,</span><br><span class="line">    second=0;//时间默认值</span><br><span class="line">    <span class="keyword">if</span>(diff &gt; 0)&#123;</span><br><span class="line">        day = Math.floor(diff / (60 * 60 * 24));</span><br><span class="line">        hour = Math.floor(diff / (60 * 60)) - (day * 24);</span><br><span class="line">        minute = Math.floor(diff / 60) - (day * 24 * 60) - (hour * 60);</span><br><span class="line">        second = Math.floor(diff) - (day * 24 * 60 * 60) - (hour * 60 * 60) - (minute * 60);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (day &lt;= 9) day = <span class="string">'0'</span> + day;</span><br><span class="line">    <span class="keyword">if</span> (hour &lt;= 9) hour = <span class="string">'0'</span> + hour;</span><br><span class="line">    <span class="keyword">if</span> (minute &lt;= 9) minute = <span class="string">'0'</span> + minute;</span><br><span class="line">    <span class="keyword">if</span> (second &lt;= 9) second = <span class="string">'0'</span> + second;</span><br><span class="line">    vm.race_time = day+<span class="string">"天"</span>+hour+<span class="string">"小时"</span>+minute+<span class="string">"分钟"</span>+second+<span class="string">"秒"</span>;</span><br><span class="line">    diff--;</span><br><span class="line">&#125;,1000);</span><br><span class="line"><span class="keyword">if</span>(diff&lt;=0)&#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="时间戳计算时间差-非原创"><a href="#时间戳计算时间差-非原创" class="headerlink" title="时间戳计算时间差(非原创)"></a>时间戳计算时间差(非原创)</h3><p><a href="https://liyunpeng.iteye.com/blog/2026403" target="_blank" rel="noopener">从这里看到的</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = Date.parse( new Date());</span><br><span class="line">var ajaxwork_date = Number(Date.parse(ret.data.content.work_date).toString().substr(0,10));</span><br><span class="line">var today = Number(timestamp.toString().substr(0,10));</span><br><span class="line">var diffstamp = ajaxwork_date - today;</span><br><span class="line">var free_time = Math.floor(diffstamp/86400);</span><br><span class="line"><span class="keyword">if</span>(free_time &lt; 0) &#123;</span><br><span class="line">    ret.data.content.work_date = <span class="string">'空闲'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    ret.data.content.work_date = (free_time + 1) + <span class="string">'天后空闲'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="vue-v-for遍历失败原因"><a href="#vue-v-for遍历失败原因" class="headerlink" title="vue v-for遍历失败原因"></a>vue v-for遍历失败原因</h3><p><a href="http://www.mamicode.com/info-detail-2503903.html" target="_blank" rel="noopener">从这里看到的</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">出现的原因： 可能是页面渲染和请求数据是异步操作， 数据还未请求结束，页面已经开始渲染了，</span><br><span class="line">所以刚开始报未定义变量， 等数据获取结束后，再次渲染，页面内容出来了，但是刚开始的警告也出来了</span><br></pre></td></tr></table></figure></p><h3 id="做数据渲染列表细节"><a href="#做数据渲染列表细节" class="headerlink" title="做数据渲染列表细节"></a>做数据渲染列表细节</h3><p>数据列表渲染最忌讳是空白页的出现，用户体验很不好，所以可以这样做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 给渲染变量赋值为缓存，无论这个缓存存在与否。</span><br><span class="line">2. 赋值后html就可以渲染出数据了，同时请求ajax，</span><br><span class="line">比较ajax返回值和赋值缓存的渲染变量，</span><br><span class="line">如果相同，就直接<span class="built_in">return</span>掉ajax的后续操作，如果</span><br><span class="line">不相同，则把ajax返回数据赋值给渲染变量，</span><br><span class="line">再把变量存入缓存（顺序不要变）。</span><br><span class="line">3. 这样每次进来，可以直接展示缓存的数据，ajax取</span><br><span class="line">到数据不同的话则直接替换。</span><br></pre></td></tr></table></figure><h3 id="获取apicloud应用签名的工具"><a href="#获取apicloud应用签名的工具" class="headerlink" title="获取apicloud应用签名的工具"></a>获取apicloud应用签名的工具</h3><p>叫GenSignature，直接下载.apk文件安装该应用，然后把你的appID<br>输入进去就能得到该应用的签名。</p><h3 id="使用vue导致ios出现点击延迟问题-加了tapmode没用"><a href="#使用vue导致ios出现点击延迟问题-加了tapmode没用" class="headerlink" title="使用vue导致ios出现点击延迟问题(加了tapmode没用)"></a>使用vue导致ios出现点击延迟问题(加了tapmode没用)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">引用fastclick.js</span><br><span class="line">然后在apiready函数里调用</span><br><span class="line">FastClick.attach(document.body);//解决vue在ios下点击延迟的问题，测试有效</span><br><span class="line">很谢谢这位网友的分享。</span><br></pre></td></tr></table></figure><p><a href="https://github.com/siyuankang/syk" target="_blank" rel="noopener">fastclick.js文件下载</a></p><h3 id="手机端判断滑动方向【copy】"><a href="#手机端判断滑动方向【copy】" class="headerlink" title="手机端判断滑动方向【copy】"></a>手机端判断滑动方向【copy】</h3><p><font color="#c0c0c0">备注：/<em>兼容安卓滑动事件</em>/</font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">html&#123;</span><br><span class="line">   touch-action:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// // var h = document.documentElement.clientHeight,</span><br><span class="line">    // // var h = api.frameHeight;</span><br><span class="line">    // mybody = document.getElementsByTagName(<span class="string">'body'</span>)[0];</span><br><span class="line">    // // mybody.style.height = h + <span class="string">'px'</span>;</span><br><span class="line">    // //返回角度</span><br><span class="line">    // <span class="keyword">function</span> GetSlideAngle(dx,dy) &#123;</span><br><span class="line">    //     <span class="built_in">return</span> Math.atan2(dy,dx) * 180 / Math.PI;</span><br><span class="line">    // &#125;</span><br><span class="line">    //     //根据起点和终点返回方向 1：向上，2：向下，3：向左，4：向右,0：未滑动</span><br><span class="line">    //     <span class="keyword">function</span> GetSlideDirection(startX,startY, endX, endY) &#123;</span><br><span class="line">    //         var dy = startY - endY;</span><br><span class="line">    //         var dx = endX - startX;</span><br><span class="line">    //         var result = 0;</span><br><span class="line">    //         //如果滑动距离太短</span><br><span class="line">    //         <span class="keyword">if</span> (Math.abs(dx) &lt; 2 &amp;&amp; Math.abs(dy) &lt; 2) &#123;</span><br><span class="line">    //             <span class="built_in">return</span> result;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //         var angle = GetSlideAngle(dx, dy);</span><br><span class="line">    //         <span class="keyword">if</span> (angle &gt;= -45 &amp;&amp; angle &lt; 45) &#123;</span><br><span class="line">    //             result = 4;</span><br><span class="line">    //         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (angle &gt;= 45 &amp;&amp; angle &lt; 135) &#123;</span><br><span class="line">    //             result = 1;</span><br><span class="line">    //         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (angle &gt;= -135 &amp;&amp; angle &lt; -45) &#123;</span><br><span class="line">    //</span><br><span class="line">    //             result = 2;</span><br><span class="line">    //</span><br><span class="line">    //         &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((angle &gt;= 135 &amp;&amp; angle &lt;= 180) || (angle &gt;= -180 &amp;&amp; angle &lt; -135)) &#123;</span><br><span class="line">    //</span><br><span class="line">    //             result = 3;</span><br><span class="line">    //</span><br><span class="line">    //         &#125;</span><br><span class="line">    //</span><br><span class="line">    //         <span class="built_in">return</span> result;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     //滑动处理</span><br><span class="line">    //     var startX, startY;</span><br><span class="line">    //     mybody.addEventListener(<span class="string">'touchstart'</span>, <span class="keyword">function</span> (ev)&#123;</span><br><span class="line">    //     ev.preventDefault();</span><br><span class="line">    //     startX = ev.touches[0].pageX;</span><br><span class="line">    //     startY = ev.touches[0].pageY;</span><br><span class="line">    //     &#125;, <span class="literal">false</span>);</span><br><span class="line">    //     mybody.addEventListener(<span class="string">'touchmove'</span>, <span class="keyword">function</span> (ev)&#123;</span><br><span class="line">    //     var endX, endY;</span><br><span class="line">    //     ev.preventDefault();</span><br><span class="line">    //     endX = ev.changedTouches[0].pageX;</span><br><span class="line">    //</span><br><span class="line">    //     endY = ev.changedTouches[0].pageY;</span><br><span class="line">    //     var direction = GetSlideDirection(startX, startY, endX, endY);</span><br><span class="line">    //     <span class="keyword">if</span>(direction == 2)&#123;</span><br><span class="line">    //         <span class="variable">$api</span>.addCls(<span class="variable">$api</span>.byId(<span class="string">'header'</span>), <span class="string">'load'</span>);</span><br><span class="line">    //</span><br><span class="line">    //     &#125;</span><br><span class="line">    //   &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="grid布局实现的九宫格【copy】"><a href="#grid布局实现的九宫格【copy】" class="headerlink" title="grid布局实现的九宫格【copy】"></a>grid布局实现的九宫格【copy】</h3><p>html代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;6&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;7&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;8&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">"box"</span>&gt;9&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  background: <span class="comment">#fff1ce;</span></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-gap: 10px;</span><br><span class="line">  grid-template-columns: repeat(3, 1fr);</span><br><span class="line">  grid-template-rows: repeat(3, 1fr);</span><br><span class="line">  grid-auto-flow: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  background-color: <span class="comment">#ccc;</span></span><br><span class="line">  color: <span class="comment">#000;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h3 id="图片上传，缩略图显示思路（vue）"><a href="#图片上传，缩略图显示思路（vue）" class="headerlink" title="图片上传，缩略图显示思路（vue）"></a>图片上传，缩略图显示思路（vue）</h3><p>选中图片后，直接传到后台，后台会返回服务器的图片地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义3个数组</span><br><span class="line">thumbImg:[],  //用于循环显示的缩略图地址</span><br><span class="line">nativeImg:[], //点击查看大图的数组，完整路径</span><br><span class="line">nativeSubmitImg: []  //存放后台返回的相对路径，发送表单的时候，把这个数组交给后台</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="css" scheme="www.siykang.xyz/categories/css/"/>
    
    
      <category term="Apicloud" scheme="www.siykang.xyz/tags/Apicloud/"/>
    
  </entry>
  
</feed>
